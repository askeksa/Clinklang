
use std::f64;
use std::str::FromStr;

use lalrpop_util::ParseError;

use crate::ast::*;

grammar;

pub Program: Program<'input> = {
	<declarations:Declaration*> => Program {<>},
};

Declaration: Declaration<'input> = {
	<kind:ProcedureKind> <name:Id> <params:Pattern> "->" <outputs:Pattern> <body:Statement*>
		=> Declaration::Procedure {<>},
};

ProcedureKind: ProcedureKind = {
	"module" => ProcedureKind::Module,
	"function" => ProcedureKind::Function,
	"instrument" => ProcedureKind::Instrument,
}

Pattern: Pattern<'input> = {
	<item:PatternItem> => vec![item],
	"(" <items:Comma<PatternItem>> ")" => <>
};

PatternItem: PatternItem<'input> = {
	<variable:PatternVariable> => PatternItem { <>, scope: None, width: None, value_type: None },
	<variable:PatternVariable> ":" <scope:Scope?> <width:Width?> <value_type:Type?> => PatternItem {<>},
};

PatternVariable: PatternVariable<'input> = {
	<name:Id> => PatternVariable::Variable {<>},
	"[" <left:Id> "," <right:Id> "]" => PatternVariable::Split {<>},
};

Scope: Scope = {
	"static" => Scope::Static,
	"dynamic" => Scope::Dynamic,
};

Width: Width<'input> = {
	"mono" => Width::Mono,
	"stereo" => Width::Stereo,
	"^" <name:Id> => Width::Generic {<>},
};

Type: ValueType = {
	"number" => ValueType::Number,
	"bool" => ValueType::Bool,
	"buffer" => ValueType::Buffer,
}

Statement: Statement<'input> = {
	<node:Pattern> "=" <exp:Expression> ";" => Statement::Assign {<>},
};

Expression: Expression<'input> = {
	OrExpression,
};

OrExpression = BinOpLevel<OrOp, XorExpression>;

OrOp: BinOpKind = "|" => BinOpKind::Or;

XorExpression = BinOpLevel<XorOp, AndExpression>;

XorOp: BinOpKind = "^" => BinOpKind::Xor;

AndExpression = BinOpLevel<AndOp, CompareExpression>;

AndOp: BinOpKind = "&" => BinOpKind::And;

CompareExpression = BinOpLevel<CompareOp, AdditiveExpression>;

CompareOp: BinOpKind = {
	"==" => BinOpKind::Eq,
	"!=" => BinOpKind::Neq,
	"<" => BinOpKind::Less,
	"<=" => BinOpKind::LessEq,
	">" => BinOpKind::Greater,
	">=" => BinOpKind::GreaterEq,
};

AdditiveExpression = BinOpLevel<AdditiveOp, MultiplicativeExpression>;

AdditiveOp: BinOpKind = {
	"+" => BinOpKind::Add,
	"-" => BinOpKind::Sub,
};

MultiplicativeExpression = BinOpLevel<MultiplicativeOp, UnaryExpression>;

MultiplicativeOp: BinOpKind = {
	"*" => BinOpKind::Mul,
	"/" => BinOpKind::Div,
};

UnaryExpression: Expression<'input> = {
	<op:UnOp<UnaryOp>> <exp:Box<PrimaryExpression>> => Expression::UnOp {<>},
	PrimaryExpression,
};

UnaryOp: UnOpKind = {
	"-" => UnOpKind::Neg,
	"!" => UnOpKind::Not,
};

PrimaryExpression: Expression<'input> = {
	<value:Num> => Expression::Number {<>},
	<name:Id> => Expression::Variable {<>},
	<name:Id> "(" <args:Comma<Expression>> ")" => Expression::Call {<>},
	"(" <mut elements:Comma<Expression>> ")" => {
		if elements.len() == 1 {
			elements.drain(..).next().unwrap()
		} else {
			Expression::Tuple {<>}
		}
	},
	"[" <left:Box<Expression>> "," <right:Box<Expression>> "]" => Expression::Merge {<>},
	<exp:Box<PrimaryExpression>> "." <name:Id> => Expression::Property {<>},
	<exp:Box<PrimaryExpression>> "." <index:Uint> => Expression::TupleIndex {<>},
	<exp:Box<PrimaryExpression>> "[" <index:Box<Expression>> "]" => Expression::BufferIndex {<>},
};

Num: f64 = {
	<pos:@L> <i:Uint> =>? {
		let n = i as f64;
		if n as u64 == i {
			Ok(n)
		} else {
			Err(ParseError::InvalidToken { location: pos })
		}
	},
	DecimalNum,
	HexadecimalNum,
	"inf" => f64::INFINITY,
};

Id: Id<'input> = {
	<pos:@L> <text:r"[_a-zA-Z][_a-zA-Z0-9]*"> => Id {<>},
};

Uint: u64 = <pos:@L> <s:r"0|[1-9][0-9]*"> =>? {
	u64::from_str(s).map_err(|e| ParseError::InvalidToken { location: pos })
};

DecimalNum: f64 = <pos:@L> <s:r"(0|[1-9][0-9]*)[.][0-9]+"> =>? {
	f64::from_str(s).map_err(|e| ParseError::InvalidToken { location: pos })
};

HexadecimalNum: f64 = <pos:@L> <s:r"0x[0-9a-fA-F]+([.][0-9a-fA-F]*)?"> =>? {
	let mut n = 0.0;
	let mut f = 1.0;
	let mut ff = 1.0;
	for c in s.bytes().skip(2) {
		if c == b'.' {
			ff = 1.0 / 16.0;
		} else {
			let digit = match c {
				(b'0' ..= b'9') => c - b'0',
				(b'a' ..= b'f') => 10 + c - b'a',
				(b'A' ..= b'F') => 10 + c - b'A',
				_ => panic!(),
			} as f64;
			n *= 16.0;
			let new_n = n + digit;
			if new_n - n != digit {
				return Err(ParseError::InvalidToken { location: pos });
			}
			n = new_n;
			f *= ff;
		}
	}
	Ok(n * f)
};

Comma<T>: Vec<T> = <v:(<T> ",")*> <e:T?> => v.into_iter().chain(e).collect();

Box<T>: Box<T> = <data:T> => Box::new(data);

UnOp<Op>: UnOp = {
	<pos:@L> <kind:Op> => UnOp {<>}
}

BinOp<Op>: BinOp = {
	<pos:@L> <kind:Op> => BinOp {<>}
}

BinOpLevel<Op, NextLevel>: Expression<'input> = {
	<left:Box<BinOpLevel<Op, NextLevel>>> <op:BinOp<Op>> <right:Box<NextLevel>>
		=> Expression::BinOp {<>},
	NextLevel
}
